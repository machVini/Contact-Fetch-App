package com.br.contactfetchapp.data.repositoryimport android.net.ConnectivityManagerimport com.br.contactfetchapp.data.mapper.toEntityimport com.br.contactfetchapp.data.mapper.toModelimport com.br.contactfetchapp.data.model.RandomUserimport com.br.contactfetchapp.data.source.local.room.dao.RandomUserDaoimport com.br.contactfetchapp.data.source.remote.api.RandomUserApiimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.flowimport kotlinx.coroutines.flow.flowOnclass RandomUserRepositoryImpl (    private val api: RandomUserApi,    private val dao: RandomUserDao,    private val connectivityManager: ConnectivityManager) : RandomUserRepository {    override fun getAllUser(page: Int, pageSize: Int): Flow<List<RandomUser>> = flow {        if (isConnected()) {            val response = api.getAllUsers(page = page, results = pageSize)            if (response.isSuccessful && response.body() != null) {                response.body()?.let {                    dao.insertUsers(response.body()!!.results.map { it.toEntity() })                    emit(response.body()!!.results.map { it.toModel() })                }            }        } else {            // Fetching from local if there's no internet connection            dao.getAllUsers().collect {                emit(it.map { it.toModel() })            }        }    }.catch {        dao.getAllUsers().collect {            emit(it.map { it.toModel() })        }    }.flowOn(Dispatchers.IO)    private fun isConnected(): Boolean {        val networkInfo = connectivityManager.activeNetworkInfo        return networkInfo != null && networkInfo.isConnected    }}